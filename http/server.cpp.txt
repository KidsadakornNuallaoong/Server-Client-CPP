#include <iostream>
#include <boost/asio.hpp>
#include <boost/json.hpp>  // Boost.JSON for JSON handling

using namespace boost::asio;
using namespace boost::asio::ip;
namespace json = boost::json;

class HttpServer {
public:
    HttpServer(io_service& io_service, short port)
        : acceptor_(io_service, tcp::endpoint(tcp::v4(), port)), socket_(io_service) {
        do_accept();
    }

private:
    void do_accept() {
        acceptor_.async_accept(socket_, [this](boost::system::error_code ec) {
            if (!ec) {
                std::make_shared<Session>(std::move(socket_))->start();
            }
            do_accept();
        });
    }

    tcp::acceptor acceptor_;
    tcp::socket socket_;

    class Session : public std::enable_shared_from_this<Session> {
    public:
        Session(tcp::socket socket) : socket_(std::move(socket)) {}

        void start() { do_read(); }

    private:
        void do_read() {
            auto self(shared_from_this());
            socket_.async_read_some(buffer(data_, max_length),
                                    [this, self](boost::system::error_code ec, std::size_t length) {
                if (!ec) {
                    std::string request(data_, length);
                    std::string response;

                    // Check the path in the HTTP request and set appropriate response
                    if (request.find("GET / ") != std::string::npos) {
                        response = "HTTP/1.1 200 OK\r\nContent-Length: 13\r\n\r\nHello, World!";
                    } else if (request.find("GET /server ") != std::string::npos) {
                        response = "HTTP/1.1 200 OK\r\nContent-Length: 14\r\n\r\nServer Message";
                    } else if (request.find("GET /json ") != std::string::npos) {
                        // Send a JSON response
                        json::value jsonResponse = {{"message", "This is JSON response"}};
                        std::string jsonString = json::serialize(jsonResponse);
                        response = "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: " + std::to_string(jsonString.size()) + "\r\n\r\n" + jsonString;
                    } else if (request.find("POST /json ") != std::string::npos) {
                        // Parse incoming JSON (for example, from a POST request)
                        auto pos = request.find("\r\n\r\n");
                        if (pos != std::string::npos) {
                            std::string body = request.substr(pos + 4);  // Extract the body of the request
                            try {
                                json::value parsed_json = json::parse(body);  // Parse incoming JSON
                                std::string responseBody = json::serialize(parsed_json);
                                response = "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: " + std::to_string(responseBody.size()) + "\r\n\r\n" + responseBody;
                            } catch (std::exception& e) {
                                response = "HTTP/1.1 400 Bad Request\r\nContent-Length: 0\r\n\r\n";
                            }
                        }
                    } else {
                        response = "HTTP/1.1 404 Not Found\r\nContent-Length: 9\r\n\r\nNot Found";
                    }

                    do_write(response);
                }
            });
        }

        void do_write(const std::string& response) {
            auto self(shared_from_this());
            boost::asio::async_write(socket_, buffer(response),
                                     [this, self](boost::system::error_code ec, std::size_t /*length*/) {
                if (!ec) {
                    socket_.shutdown(tcp::socket::shutdown_both);
                }
            });
        }

        tcp::socket socket_;
        enum { max_length = 1024 };
        char data_[max_length];
    };
};

int main() {
    try {
        io_service io_service;
        HttpServer server(io_service, 8080);  // Server on port 8080
        std::cout << "Server is running on port 8080..." << std::endl;
        io_service.run();
    } catch (std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}